// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

exports.getFibNums = getFibNums;
exports.sumEvenNums = sumEvenNums;
exports.ans = () => {
  return sumEvenNums(getFibNums(1, 2, Math.pow(10, 6) * 4));
};

/**
 * Gets fibonacci numbers when given first 2 in sequence, and a maximum number value.
 * @param {Number} first The first number of sequence
 * @param {Number} second The second number of sequence
 * @param {Number} to The value that fibonacci numbers cannot exceed
 */
function getFibNums(first, second, to) {
  let fib1 = first;
  let fib2 = second;
  // array to add to
  let nums = [fib1, fib2];
  let next;
  while (true) {
    // If next number will be over `to` break.
    if (fib1 + fib2 >= to) {
      break;
    }
    // Next num is 1st + 2nd
    next = fib1 + fib2;
    nums.push(next);

    // new fib1 = old fib2
    fib1 = fib2;
    fib2 = next;
  }
  return nums;
}

/**
 * Sums even numbers of an array
 * @param {Array} arr
 */
function sumEvenNums(arr) {
  let sum = 0;
  arr.forEach(num => {
    if (num % 2 === 0) {
      sum += num;
    } else {
      return;
    }
  });
  return sum;
}
